# Python 获取类的属性

在本文中，我们将介绍如何获取 Python 中类的属性。

## 介绍属性

在 Python 中，类是通过属性和方法来定义的。属性是类的特征，方法是类的行为。了解如何获取类的属性是非常重要的，因为它允许我们在运行时动态地访问和操作类的特征。

## 使用 dir() 函数获取属性

Python 内置的`dir()`函数可以获取一个对象的所有属性和方法。当我们调用`dir()`函数时，它会返回一个包含字符串的列表，每个字符串表示对象的一个属性或方法。我们可以通过这个列表来查看类的所有属性。

下面是一个示例，演示如何使用`dir()`函数来获取类的属性：

```python
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

person = Person("Alice", 25)

print(dir(person))
```

输出结果：

```python
['__class__', '__delattr__', '__dict__', '__dir__', '__doc__', '__eq__', '__format__', '__ge__', '__getattribute__', '__gt__', '__hash__', '__init__', '__init_subclass__', '__le__', '__lt__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', 'age', 'name']
```

从输出结果中，我们可以看到类的属性`name`和`age`被列出。

## 使用 vars() 函数获取属性

除了`dir()`函数之外，我们还可以使用内置的`vars()`函数来获取类的属性。`vars()`函数返回一个字典，其中键是属性名，值是属性的值。这个函数只适用于类的实例，而不是类本身。

下面是一个示例，演示如何使用`vars()`函数来获取类的属性：

```python
class Circle:
    def __init__(self, radius):
        self.radius = radius

circle = Circle(5)

print(vars(circle))
```

输出结果：

```python
{'radius': 5}
```

从输出结果中，我们可以看到类的属性`radius`及其对应的值被列出。

## 使用 getattr() 和 hasattr() 函数

除了`dir()`和`vars()`函数之外，我们还可以使用内置的`getattr()`和`hasattr()`函数来获取类的属性。`getattr()`函数用于获取属性的值，`hasattr()`函数用于检查属性是否存在。

下面是一个示例，演示如何使用`getattr()`和`hasattr()`函数来获取和检查类的属性：

```python
class Car:
    def __init__(self, brand, model, year):
        self.brand = brand
        self.model = model
        self.year = year

car = Car("Tesla", "Model S", 2022)

model = getattr(car, "model")
print(model)

if hasattr(car, "color"):
    color = getattr(car, "color")
    print(color)
else:
    print("The car has no color.")
```

输出结果：

```python
Model S
The car has no color.
```

在上面的示例中，我们首先使用`getattr()`函数获取类的属性`model`的值，并打印出来。然后使用`hasattr()`函数检查类的属性`color`是否存在，如果存在则使用`getattr()`函数获取其值，并打印出来。如果属性`color`不存在，则输出一个提示消息。
